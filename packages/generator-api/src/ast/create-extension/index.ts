import ts from 'typescript';

import type { IGeneratorProps } from '@easy-breezy/core';

export const createExtension = ({ i18n }: { i18n: IGeneratorProps['i18n'] }) => {
    const AST = ts.factory.createNodeArray(
        [
            ts.factory.createImportDeclaration(
                undefined,
                ts.factory.createImportClause(
                    false,
                    undefined,
                    ts.factory.createNamedImports([
                        ts.factory.createImportSpecifier(
                            false,
                            undefined,
                            ts.factory.createIdentifier("fetchBaseQuery")
                        ),
                        ts.factory.createImportSpecifier(
                            false,
                            undefined,
                            ts.factory.createIdentifier("buildCreateApi")
                        ),
                        ts.factory.createImportSpecifier(
                            false,
                            undefined,
                            ts.factory.createIdentifier("coreModule")
                        ),
                        ts.factory.createImportSpecifier(
                            false,
                            undefined,
                            ts.factory.createIdentifier("reactHooksModule")
                        )
                    ])
                ),
                ts.factory.createStringLiteral("@reduxjs/toolkit/query/react"),
                undefined
            ),
            ts.factory.createImportDeclaration(
                undefined,
                ts.factory.createImportClause(
                    true,
                    undefined,
                    ts.factory.createNamedImports([ts.factory.createImportSpecifier(
                        false,
                        ts.factory.createIdentifier("base"),
                        ts.factory.createIdentifier("baseApiType")
                    )])
                ),
                ts.factory.createStringLiteral("./"),
                undefined
            ),
            ts.addSyntheticLeadingComment(
                ts.factory.createVariableStatement(
                    [ts.factory.createToken(ts.SyntaxKind.ExportKeyword)],
                    ts.factory.createVariableDeclarationList(
                        [ts.factory.createVariableDeclaration(
                            ts.factory.createIdentifier("createApi"),
                            undefined,
                            undefined,
                            ts.factory.createCallExpression(
                                ts.factory.createIdentifier("buildCreateApi"),
                                undefined,
                                [
                                    ts.factory.createCallExpression(
                                        ts.factory.createIdentifier("coreModule"),
                                        undefined,
                                        []
                                    ),
                                    ts.factory.createCallExpression(
                                        ts.factory.createIdentifier("reactHooksModule"),
                                        undefined,
                                        []
                                    )
                                ]
                            )
                        )],
                        ts.NodeFlags.Const
                    )
                ),
                ts.SyntaxKind.MultiLineCommentTrivia,
                `\n    ${i18n.t('comments.api-context')}\n`,
                true
            ),
            ts.addSyntheticLeadingComment(
                ts.factory.createVariableStatement(
                    [ts.factory.createToken(ts.SyntaxKind.ExportKeyword)],
                    ts.factory.createVariableDeclarationList(
                        [ts.factory.createVariableDeclaration(
                            ts.factory.createIdentifier("baseQuery"),
                            undefined,
                            undefined,
                            ts.factory.createArrowFunction(
                                undefined,
                                undefined,
                                [ts.factory.createParameterDeclaration(
                                    undefined,
                                    undefined,
                                    ts.factory.createIdentifier("baseUrl"),
                                    undefined,
                                    ts.factory.createKeywordTypeNode(ts.SyntaxKind.StringKeyword),
                                    undefined
                                )],
                                undefined,
                                ts.factory.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                                ts.factory.createBlock(
                                    [ts.factory.createReturnStatement(ts.factory.createCallExpression(
                                        ts.factory.createIdentifier("fetchBaseQuery"),
                                        undefined,
                                        [ts.factory.createObjectLiteralExpression(
                                            [
                                                ts.factory.createShorthandPropertyAssignment(
                                                    ts.factory.createIdentifier("baseUrl"),
                                                    undefined
                                                ),
                                                ts.factory.createPropertyAssignment(
                                                    ts.factory.createIdentifier("headers"),
                                                    ts.factory.createObjectLiteralExpression(
                                                        [ts.factory.createPropertyAssignment(
                                                            ts.factory.createStringLiteral("cache-control"),
                                                            ts.factory.createStringLiteral("no-cache")
                                                        )],
                                                        false
                                                    )
                                                )
                                            ],
                                            true
                                        )]
                                    ))],
                                    true
                                )
                            )
                        )],
                        ts.NodeFlags.Const
                    )
                ),
                ts.SyntaxKind.MultiLineCommentTrivia,
                `\n    ${i18n.t('comments.api-base-query')}\n`,
                true
            ),
            ts.addSyntheticLeadingComment(
                ts.factory.createVariableStatement(
                    [ts.factory.createToken(ts.SyntaxKind.ExportKeyword)],
                    ts.factory.createVariableDeclarationList(
                        [ts.factory.createVariableDeclaration(
                            ts.factory.createIdentifier("enhanceEndpoints"),
                            undefined,
                            undefined,
                            ts.factory.createArrowFunction(
                                undefined,
                                undefined,
                                [ts.factory.createParameterDeclaration(
                                    undefined,
                                    undefined,
                                    ts.factory.createIdentifier("api"),
                                    undefined,
                                    ts.factory.createTypeQueryNode(
                                        ts.factory.createIdentifier("baseApiType"),
                                        undefined
                                    ),
                                    undefined
                                )],
                                undefined,
                                ts.factory.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                                ts.factory.createBlock(
                                    [ts.factory.createExpressionStatement(ts.factory.createCallExpression(
                                        ts.factory.createPropertyAccessExpression(
                                            ts.factory.createIdentifier("api"),
                                            ts.factory.createIdentifier("enhanceEndpoints")
                                        ),
                                        undefined,
                                        [ts.factory.createObjectLiteralExpression(
                                            [
                                                ts.factory.createPropertyAssignment(
                                                    ts.factory.createIdentifier("addTagTypes"),
                                                    ts.factory.createArrayLiteralExpression(
                                                        [],
                                                        false
                                                    )
                                                ),
                                                ts.factory.createPropertyAssignment(
                                                    ts.factory.createIdentifier("endpoints"),
                                                    ts.factory.createObjectLiteralExpression(
                                                        [],
                                                        false
                                                    )
                                                )
                                            ],
                                            true
                                        )]
                                    ))],
                                    true
                                )
                            )
                        )],
                        ts.NodeFlags.Const
                    )
                ),
                ts.SyntaxKind.MultiLineCommentTrivia,
                `\n    ${i18n.t('comments.api-enhance-endpoints')}\n`,
                true
            ),
            ts.addSyntheticLeadingComment(
                ts.factory.createVariableStatement(
                    [ts.factory.createToken(ts.SyntaxKind.ExportKeyword)],
                    ts.factory.createVariableDeclarationList(
                        [ts.factory.createVariableDeclaration(
                            ts.factory.createIdentifier("injectEndpoints"),
                            undefined,
                            undefined,
                            ts.factory.createArrowFunction(
                                undefined,
                                undefined,
                                [ts.factory.createParameterDeclaration(
                                    undefined,
                                    undefined,
                                    ts.factory.createIdentifier("api"),
                                    undefined,
                                    ts.factory.createTypeQueryNode(
                                        ts.factory.createIdentifier("baseApiType"),
                                        undefined
                                    ),
                                    undefined
                                )],
                                undefined,
                                ts.factory.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                                ts.factory.createBlock(
                                    [ts.factory.createReturnStatement(ts.factory.createCallExpression(
                                        ts.factory.createPropertyAccessExpression(
                                            ts.factory.createIdentifier("api"),
                                            ts.factory.createIdentifier("injectEndpoints")
                                        ),
                                        undefined,
                                        [ts.factory.createObjectLiteralExpression(
                                            [ts.factory.createPropertyAssignment(
                                                ts.factory.createIdentifier("endpoints"),
                                                ts.factory.createArrowFunction(
                                                    undefined,
                                                    undefined,
                                                    [ts.factory.createParameterDeclaration(
                                                        undefined,
                                                        undefined,
                                                        ts.factory.createIdentifier("build"),
                                                        undefined,
                                                        undefined,
                                                        undefined
                                                    )],
                                                    undefined,
                                                    ts.factory.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                                                    ts.factory.createParenthesizedExpression(ts.factory.createObjectLiteralExpression(
                                                        [],
                                                        false
                                                    ))
                                                )
                                            )],
                                            true
                                        )]
                                    ))],
                                    true
                                )
                            )
                        )],
                        ts.NodeFlags.Const
                    )
                ),
                ts.SyntaxKind.MultiLineCommentTrivia,
                `\n    ${i18n.t('comments.api-inject-endpoints')}\n`,
                true
            )
        ]
    );

    const sourceFile = ts.createSourceFile('extension.ts', '', ts.ScriptTarget.Latest, true, ts.ScriptKind.TS);
    const printer = ts.createPrinter();

    return {
        AST,
        print: printer.printList(
            ts.ListFormat.MultiLine,
            AST,
            sourceFile
        )
    };
};
